import os
import aiohttp
import asyncio
import json
import re
from datetime import datetime, timedelta, timezone
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (13 —Ä–∞–∑ –≤ –¥–µ–Ω—å —Å 07:00 –¥–æ 19:00 –ú–°–ö)
PUBLICATION_HOURS = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

class AsyncYandexGPTMonitor:
    def __init__(self):
        self.api_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.headers = {
            "Authorization": f"Api-Key {YANDEX_API_KEY}",
            "Content-Type": "application/json"
        }
        self.session = None
        self.token_usage = 0
        
        # –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
        self.trusted_domains = [
            # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–≥–∏ –∫–æ–º–ø–∞–Ω–∏–π
            'blog.google', 'blogs.microsoft.com', 'openai.com/blog', 
            'ai.meta.com', 'x.ai', 'anthropic.com', 'developer.apple.com',
            'aws.amazon.com', 'blogs.nvidia.com', 'tesla.com',
            'yandex.ru/blog', 'deepseek.com',
            
            # –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–∑–¥–∞–Ω–∏—è
            'techcrunch.com', 'theverge.com', 'wired.com', 'arstechnica.com',
            'reuters.com', 'bloomberg.com', 'cnbc.com', 'venturebeat.com',
            
            # –ù–∞—É—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            'arxiv.org', 'nature.com', 'science.org'
        ]
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.suspicious_indicators = [
            '—Å–ª—É—Ö–∏', '—É—Ç–µ—á–∫–∏', '–∏–Ω—Å–∞–π–¥–µ—Ä—ã', '–Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ',
            '–≤–æ–∑–º–æ–∂–Ω–æ', '–≤–µ—Ä–æ—è—Ç–Ω–æ', '–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ', '—Å–æ–æ–±—â–∞—é—Ç',
            '—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–ø—Ä–æ—Ä—ã–≤ –≤–µ–∫–∞', '–∏–∑–º–µ–Ω–∏—Ç –≤—Å—ë', '–∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ'
        ]

    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    def validate_news_source(self, news_content):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏"""
        if not news_content:
            return "empty"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞ –≤ —Å—Å—ã–ª–∫–µ
        url_match = re.search(r'üîó\s*(http[^\s]+)', news_content)
        if url_match:
            url = url_match.group(1)
            if any(domain in url for domain in self.trusted_domains):
                return "trusted"
            else:
                return "unverified"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
        content_lower = news_content.lower()
        if any(indicator in content_lower for indicator in self.suspicious_indicators):
            return "suspicious"
            
        return "unknown"

    async def yandex_gpt_call(self, prompt, max_tokens=2000):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ YandexGPT API"""
        try:
            data = {
                "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.7,
                    "maxTokens": max_tokens
                },
                "messages": [
                    {
                        "role": "system",
                        "text": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–± –ò–ò. 
                        –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏:
                        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –∏–∑–¥–∞–Ω–∏—è–º
                        - –ò–∑–±–µ–≥–∞–π —Å–ª—É—Ö–æ–≤, —É—Ç–µ—á–µ–∫ –∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                        - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –≤–∞–∂–Ω–µ–µ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
                        - –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π - –ª—É—á—à–µ —Å–æ–æ–±—â–∏ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏"""
                    },
                    {
                        "role": "user", 
                        "text": prompt
                    }
                ]
            }

            logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∫ YandexGPT ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            async with self.session.post(
                self.api_url, 
                headers=self.headers, 
                json=data, 
                timeout=aiohttp.ClientTimeout(total=90)
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    if 'result' in result and 'alternatives' in result['result']:
                        content = result['result']['alternatives'][0]['message']['text']
                        
                        # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
                        estimated_tokens = len(content) // 4 + len(prompt) // 4
                        self.token_usage += estimated_tokens
                        
                        cost = (estimated_tokens / 1000) * 0.60
                        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤, ~{estimated_tokens} —Ç–∫–Ω, {cost:.2f} —Ä—É–±)")
                        
                        return content
                    else:
                        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                        return None
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                    return None
                    
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (90 —Å–µ–∫)")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    async def search_ai_news(self, hour):
        """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏"""
        time_contexts = {
            7: "—É—Ç—Ä–µ–Ω–Ω–∏–µ", 8: "—É—Ç—Ä–µ–Ω–Ω–∏–µ", 9: "—É—Ç—Ä–µ–Ω–Ω–∏–µ",
            10: "–¥–Ω–µ–≤–Ω—ã–µ", 11: "–¥–Ω–µ–≤–Ω—ã–µ", 12: "–æ–±–µ–¥–µ–Ω–Ω—ã–µ",
            13: "–¥–Ω–µ–≤–Ω—ã–µ", 14: "–¥–Ω–µ–≤–Ω—ã–µ", 15: "–¥–Ω–µ–≤–Ω—ã–µ",
            16: "–≤–µ—á–µ—Ä–Ω–∏–µ", 17: "–≤–µ—á–µ—Ä–Ω–∏–µ", 18: "–≤–µ—á–µ—Ä–Ω–∏–µ", 19: "–ø–æ–∑–¥–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏–µ"
        }
        
        context = time_contexts.get(hour, "—Ç–µ–∫—É—â–∏–µ")
        
        prompt = f"""
        –ù–∞–π–¥–∏ –°–ê–ú–£–Æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏ –î–û–°–¢–û–í–ï–†–ù–£–Æ –Ω–æ–≤–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –≤ —Å—Ñ–µ—Ä–µ –ò–ò.
        –°–µ–π—á–∞—Å {hour:02d}:00 –ú–°–ö ({context} —á–∞—Å—ã).
        
        –ö–†–ò–¢–ï–†–ò–ò –î–û–°–¢–û–í–ï–†–ù–û–°–¢–ò (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û):
        
        ‚úÖ **–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:**
        - –ö–∞–Ω–∞–ª—ã –∫–æ–º–ø–∞–Ω–∏–π –≤ X: (Google: https://x.com/Google, Microsoft: https://x.com/Microsoft, OpenAI: https://x.com/OpenAI, Meta: https://x.com/Meta, xAI: https://x.com/xAI, Anthropic: https://x.com/AnthropicAI, Apple: https://x.com/Apple, Amazon: https://x.com/Amazon, NVIDIA: https://x.com/NVIDIA, Tesla: https://x.com/Tesla, DeepSeek: https://x.com/DeepSeekAI, Yandex: https://x.com/Yandex, Midjourney: https://x.com/Midjourney, Stability AI: https://x.com/StabilityAI, Hugging Face: https://x.com/HuggingFace)
        - –ë–ª–æ–≥–∏ –∫–æ–º–ø–∞–Ω–∏–π: blog.google, blogs.microsoft.com, openai.com/blog, ai.meta.com
        - –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–∑–¥–∞–Ω–∏—è: TechCrunch, The Verge, Reuters, Bloomberg
        - –ù–∞—É—á–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: arXiv, Nature, Science
        
        ‚ö†Ô∏è **–ü–†–û–í–ï–†–Ø–¢–¨ –ö–†–ò–¢–ò–ß–ï–°–ö–ò:**
        - –°–æ—Ü—Å–µ—Ç–∏ (–∫—Ä–æ–º–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
        - –ú–∞–ª—ã–µ –±–ª–æ–≥–∏ –±–µ–∑ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        - –ù–æ–≤–æ—Å—Ç–∏ –±–µ–∑ —á–µ—Ç–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        ‚ùå **–ò–ó–ë–ï–ì–ê–¢–¨:**
        - –°–ª—É—Ö–∏, —É—Ç–µ—á–∫–∏, –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        - –ü—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ("—Ä–µ–≤–æ–ª—é—Ü–∏—è", "–ø—Ä–æ—Ä—ã–≤ –≤–µ–∫–∞")
        - –ù–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏ —Ü–∏—Ñ—Ä
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):
        1. OpenAI, Google, Microsoft, Meta, xAI, Anthropic
        2. Apple, Amazon, NVIDIA, Tesla, DeepSeek
        3. Yandex, Midjourney, Stability AI, Hugging Face
        
        –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–ê–ß–ï–°–¢–í–£ –ù–û–í–û–°–¢–ò:
        - ‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã: –¥–∞—Ç—ã, –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ü–∏—Ñ—Ä—ã, –∏–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π
        - ‚úÖ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        - ‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –≤–º–µ—Å—Ç–æ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
        - ‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏
        
        –ï–°–õ–ò –ù–ï–¢ –î–û–°–¢–û–í–ï–†–ù–´–• –ù–û–í–û–°–¢–ï–ô - –ª—É—á—à–µ –≤–µ—Ä–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–Ω–∞—á–∏–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å–æ–±–ª—é–¥–∞–π —Ç–æ—á–Ω–æ!):
        
        üöÄ [–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π]\n\n
        
        üìù [3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ö–û–ù–ö–†–ï–¢–ù–´–ú–ò —Ñ–∞–∫—Ç–∞–º–∏. –ü—Ä–∏–º–µ—Ä: "Google –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ Gemini 2.0 —Å 512K –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –¥–æ—Å—Ç—É–ø–Ω—É—é —Å 15 —è–Ω–≤–∞—Ä—è"]\n\n
        
        üí° [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]\n\n
        
        üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –ü–†–Ø–ú–û–ô –ò–°–¢–û–ß–ù–ò–ö]\n\n
        
        üîñ [3-5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤]
        
        –í–ê–ñ–ù–û: 
        - –î–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º –±–ª–æ–∫–æ–º!
        - –ù–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–∏ –ø–µ—Ä–µ–¥ üöÄ –∏ –ø–æ—Å–ª–µ üîñ!
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–∞–¥ —Å–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å—é!
        """
        
        return await self.yandex_gpt_call(prompt)

async def send_to_telegram_async(message, session):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        async with session.post(url, json=payload, timeout=aiohttp.ClientTimeout(total=20)) as response:
            if response.status == 200:
                return True
            else:
                return False
    except Exception:
        return False

async def send_no_news_message(hour, session, reason="–Ω–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    no_news_message = f"""
üöÄ AI News Monitor ‚Ä¢ {hour:02d}:00 –ú–°–ö

üìù –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.

üí° –°–∏—Å—Ç–µ–º–∞ –æ—Ç–¥–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∞–Ω–æ–Ω—Å–∞–º.

üîñ #–ò–ò #–ù–æ–≤–æ—Å—Ç–∏ #–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    """
    
    return await send_to_telegram_async(no_news_message, session)

async def publish_hourly_news(hour):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏"""
    start_time = time.time()
    
    try:
        async with AsyncYandexGPTMonitor() as monitor:
            async with aiohttp.ClientSession() as telegram_session:
                news_content = await monitor.search_ai_news(hour)
                
                if news_content:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    source_quality = monitor.validate_news_source(news_content)
                    
                    if source_quality == "suspicious":
                        logger.warning(f"‚ùå {hour:02d}:00 - –ù–æ–≤–æ—Å—Ç—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è")
                        await send_no_news_message(hour, telegram_session, "—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
                        return False
                    elif "–Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" in news_content.lower() or "–Ω–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö" in news_content.lower():
                        logger.info(f"‚ÑπÔ∏è {hour:02d}:00 - YandexGPT —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
                        await send_no_news_message(hour, telegram_session)
                        return True
                    
                    # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    lines = news_content.split('\n')
                    cleaned_content = []
                    start_adding = False
                    
                    for i, line in enumerate(lines):
                        line = line.strip()
                        if not line:
                            continue
                            
                        if line.startswith('üöÄ'):
                            start_adding = True
                        
                        if start_adding:
                            cleaned_content.append(line)
                            if line.startswith('üîñ'):
                                break
                    
                    telegram_message = '\n'.join(cleaned_content)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    quality_emoji = "‚úÖ" if source_quality == "trusted" else "‚ö†Ô∏è"
                    source_note = f"\n\n<em>{quality_emoji} –ò—Å—Ç–æ—á–Ω–∏–∫: {source_quality}</em>"
                    telegram_message += source_note
                    
                    if await send_to_telegram_async(telegram_message, telegram_session):
                        execution_time = time.time() - start_time
                        logger.info(f"‚úÖ {hour:02d}:00 - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ({execution_time:.1f}—Å–µ–∫, {source_quality})")
                        return True
                    else:
                        logger.error(f"‚ùå {hour:02d}:00 - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
                        return False
                else:
                    logger.error(f"‚ùå {hour:02d}:00 - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
                    await send_no_news_message(hour, telegram_session, "–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå {hour:02d}:00 - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö
    msk_time = datetime.now(timezone(timedelta(hours=3)))
    current_hour = msk_time.hour
    
    logger.info("=" * 50)
    logger.info("üöÄ AI News Monitor - –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏")
    logger.info(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {msk_time.strftime('%H:%M')} –ú–°–ö")
    logger.info(f"üìÖ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(PUBLICATION_HOURS)} —Ä–∞–∑/–¥–µ–Ω—å (07:00-19:00)")
    logger.info("üõ°Ô∏è –†–µ–∂–∏–º: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º")
    logger.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Å
    if current_hour in PUBLICATION_HOURS:
        logger.info(f"üéØ –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è {current_hour:02d}:00")
        success = await publish_hourly_news(current_hour)
        
        if success:
            logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {current_hour:02d}:00")
        else:
            logger.warning(f"‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è {current_hour:02d}:00")
    else:
        logger.info(f"‚è∏Ô∏è {current_hour:02d}:00 - –Ω–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

if __name__ == "__main__":
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not all([YANDEX_API_KEY, YANDEX_FOLDER_ID, TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID]):
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())
