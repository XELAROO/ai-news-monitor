import os
import aiohttp
import asyncio
import json
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')

class AsyncYandexGPTMonitor:
    def __init__(self):
        self.api_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.headers = {
            "Authorization": f"Api-Key {YANDEX_API_KEY}",
            "Content-Type": "application/json"
        }
        self.session = None
        self.token_usage = 0  # –°—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞—Ç—Ä–∞—Ç

    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.session.close()

    async def yandex_gpt_call(self, prompt, max_tokens=2000):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ YandexGPT API"""
        try:
            data = {
                "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.7,
                    "maxTokens": max_tokens
                },
                "messages": [
                    {
                        "role": "system",
                        "text": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–± –ò–ò. –°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
                    },
                    {
                        "role": "user", 
                        "text": prompt
                    }
                ]
            }

            logger.info(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            async with self.session.post(
                self.api_url, 
                headers=self.headers, 
                json=data, 
                timeout=aiohttp.ClientTimeout(total=60)
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    if 'result' in result and 'alternatives' in result['result']:
                        content = result['result']['alternatives'][0]['message']['text']
                        
                        # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
                        estimated_tokens = len(content) // 4 + len(prompt) // 4
                        self.token_usage += estimated_tokens
                        
                        cost = (estimated_tokens / 1000) * 0.60
                        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤, ~{estimated_tokens} —Ç–æ–∫–µ–Ω–æ–≤, {cost:.2f} —Ä—É–±)")
                        
                        return content
                    else:
                        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                        return None
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status} - {error_text}")
                    return None
                    
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ YandexGPT: {e}")
            return None

    async def search_ai_news(self, hour):
        """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Å–∞"""
        # –†–∞–∑–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        time_contexts = {
            6: "—É—Ç—Ä–µ–Ω–Ω–∏–µ",
            7: "—É—Ç—Ä–µ–Ω–Ω–∏–µ", 
            8: "—É—Ç—Ä–µ–Ω–Ω–∏–µ",
            9: "–¥–Ω–µ–≤–Ω—ã–µ",
            10: "–¥–Ω–µ–≤–Ω—ã–µ",
            11: "–¥–Ω–µ–≤–Ω—ã–µ", 
            12: "–æ–±–µ–¥–µ–Ω–Ω—ã–µ",
            13: "–¥–Ω–µ–≤–Ω—ã–µ",
            14: "–¥–Ω–µ–≤–Ω—ã–µ",
            15: "–¥–Ω–µ–≤–Ω—ã–µ",
            16: "–≤–µ—á–µ—Ä–Ω–∏–µ",
            17: "–≤–µ—á–µ—Ä–Ω–∏–µ",
            18: "–≤–µ—á–µ—Ä–Ω–∏–µ"
        }
        
        context = time_contexts.get(hour, "–ø–æ—Å–ª–µ–¥–Ω–∏–µ")
        
        prompt = f"""
        –ù–∞–π–¥–∏ –°–ê–ú–£–Æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1-2 —á–∞—Å–∞ –≤ —Å—Ñ–µ—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
        –í—Ä–µ–º—è —Å—É—Ç–æ–∫: {context}.
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏:
        - –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç Google, Microsoft, OpenAI, Meta, Yandex, Apple, Amazon, DeepSeek
        - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ä—ã–≤—ã, –∫—Ä—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
        
        –§–æ—Ä–º–∞—Ç –¥–ª—è Telegram:
        
        üïê {hour:02d}:00 ‚Ä¢ {context.capitalize()} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        
        üöÄ [–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏]
        
        üìù [–°—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º!]
        
        üí° [–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
        
        üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫]
        
        üîñ [3-5 —Ö–µ—à—Ç–µ–≥–æ–≤]
        
        –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º!
        """
        
        return await self.yandex_gpt_call(prompt)

async def send_to_telegram_async(message, session):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": False
        }
        
        async with session.post(url, json=payload) as response:
            if response.status == 200:
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
                return True
            else:
                error_text = await response.text()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.status} - {error_text}")
                return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

async def publish_hourly_news(hour):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Å–∞"""
    logger.info(f"üìÖ –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è {hour:02d}:00...")
    
    async with AsyncYandexGPTMonitor() as monitor:
        async with aiohttp.ClientSession() as telegram_session:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
            news_content = await monitor.search_ai_news(hour)
            
            if news_content:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                telegram_message = f"""
ü§ñ <b>–°–í–ï–ñ–ê–Ø –ù–û–í–û–°–¢–¨ –ò–ò</b> ‚Ä¢ {hour:02d}:00 –ú–°–ö

{news_content}

<em>üíé –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º ‚Ä¢ YandexGPT 5.1 Pro</em>
<em>üí≥ –¢–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ~{monitor.token_usage}</em>
                """
                
                if await send_to_telegram_async(telegram_message, telegram_session):
                    logger.info(f"üéâ –ù–æ–≤–æ—Å—Ç—å –¥–ª—è {hour:02d}:00 –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                    log_entry = f"{datetime.now()}: {hour:02d}:00 - –£—Å–ø–µ—Ö (~{monitor.token_usage} —Ç–æ–∫–µ–Ω–æ–≤)\n"
                    with open("news_log.txt", "a", encoding="utf-8") as f:
                        f.write(log_entry)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è {hour:02d}:00")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è {hour:02d}:00")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ AI News Monitor")
    logger.info("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 6:00-18:00 –ú–°–ö (12 –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –¥–µ–Ω—å)")
    logger.info(f"üí≥ –ë–∞–ª–∞–Ω—Å: 3,980 —Ä—É–± ‚Ä¢ –†–∞—Å—á–µ—Ç–Ω—ã–π —Å—Ä–æ–∫: 4-5 –º–µ—Å—è—Ü–µ–≤")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å –ø–æ –ú–°–ö
    from datetime import timezone
    msk_time = datetime.now(timezone(timedelta(hours=3)))
    current_hour = msk_time.hour
    
    # –ü—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã 6-18
    if 6 <= current_hour <= 18:
        await publish_hourly_news(current_hour)
    else:
        logger.info(f"‚è∏Ô∏è –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ({current_hour:02d}:00). –û–∂–∏–¥–∞–µ–º 6:00 –ú–°–ö")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = {
        'YANDEX_API_KEY': YANDEX_API_KEY,
        'YANDEX_FOLDER_ID': YANDEX_FOLDER_ID,
        'TELEGRAM_BOT_TOKEN': TELEGRAM_BOT_TOKEN,
        'TELEGRAM_CHANNEL_ID': TELEGRAM_CHANNEL_ID
    }
    
    missing_vars = [name for name, value in required_vars.items() if not value]
    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    asyncio.run(main())
