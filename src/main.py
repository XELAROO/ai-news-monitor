import os
import aiohttp
import asyncio
import json
from datetime import datetime, timedelta, timezone
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (13 —Ä–∞–∑ –≤ –¥–µ–Ω—å —Å 07:00 –¥–æ 19:00 –ú–°–ö)
PUBLICATION_HOURS = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

class AsyncYandexGPTMonitor:
    def __init__(self):
        self.api_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.headers = {
            "Authorization": f"Api-Key {YANDEX_API_KEY}",
            "Content-Type": "application/json"
        }
        self.session = None
        self.token_usage = 0

    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def yandex_gpt_call(self, prompt, max_tokens=2000):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ YandexGPT API"""
        try:
            data = {
                "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.7,
                    "maxTokens": max_tokens
                },
                "messages": [
                    {
                        "role": "system",
                        "text": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–± –ò–ò. –°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ú–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –î–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏."
                    },
                    {
                        "role": "user", 
                        "text": prompt
                    }
                ]
            }

            logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∫ YandexGPT ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            async with self.session.post(
                self.api_url, 
                headers=self.headers, 
                json=data, 
                timeout=aiohttp.ClientTimeout(total=90)
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    if 'result' in result and 'alternatives' in result['result']:
                        content = result['result']['alternatives'][0]['message']['text']
                        
                        # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
                        estimated_tokens = len(content) // 4 + len(prompt) // 4
                        self.token_usage += estimated_tokens
                        
                        cost = (estimated_tokens / 1000) * 0.60
                        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤, ~{estimated_tokens} —Ç–∫–Ω, {cost:.2f} —Ä—É–±)")
                        
                        return content
                    else:
                        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                        return None
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                    return None
                    
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (90 —Å–µ–∫)")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    async def search_ai_news(self, hour):
        """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Å–∞"""
        time_contexts = {
            7: "—É—Ç—Ä–µ–Ω–Ω–∏–µ", 8: "—É—Ç—Ä–µ–Ω–Ω–∏–µ", 9: "—É—Ç—Ä–µ–Ω–Ω–∏–µ",
            10: "–¥–Ω–µ–≤–Ω—ã–µ", 11: "–¥–Ω–µ–≤–Ω—ã–µ", 12: "–æ–±–µ–¥–µ–Ω–Ω—ã–µ",
            13: "–¥–Ω–µ–≤–Ω—ã–µ", 14: "–¥–Ω–µ–≤–Ω—ã–µ", 15: "–¥–Ω–µ–≤–Ω—ã–µ",
            16: "–≤–µ—á–µ—Ä–Ω–∏–µ", 17: "–≤–µ—á–µ—Ä–Ω–∏–µ", 18: "–≤–µ—á–µ—Ä–Ω–∏–µ", 19: "–ø–æ–∑–¥–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏–µ"
        }
        
        context = time_contexts.get(hour, "—Ç–µ–∫—É—â–∏–µ")
        
        prompt = f"""
        –ù–∞–π–¥–∏ –û–î–ù–£ —Å–∞–º—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1-2 —á–∞—Å–∞ –≤ —Å—Ñ–µ—Ä–µ –ò–ò.
        –°–µ–π—á–∞—Å {hour:02d}:00 –ú–°–ö ({context} —á–∞—Å—ã).
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏:
        - Google, Microsoft, OpenAI, Meta, Yandex, Apple, Amazon, DeepSeek
        - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ä—ã–≤—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
        
        –§–æ—Ä–º–∞—Ç (—Å–æ–±–ª—é–¥–∞–π —Ç–æ—á–Ω–æ!):
        
        üöÄ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
        
        üìù 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—É—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º!
        
        üí° 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –∑–Ω–∞—á–µ–Ω–∏–∏
        
        üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
        
        üîñ 3-5 —Ö–µ—à—Ç–µ–≥–æ–≤
        
        –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º –±–ª–æ–∫–æ–º!
        –ù–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–∏ –ø–µ—Ä–µ–¥ üöÄ –∏ –ø–æ—Å–ª–µ üîñ!
        """
        
        return await self.yandex_gpt_call(prompt)

async def send_to_telegram_async(message, session):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        async with session.post(url, json=payload, timeout=aiohttp.ClientTimeout(total=20)) as response:
            if response.status == 200:
                return True
            else:
                return False
    except Exception:
        return False

async def publish_hourly_news(hour):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Å–∞"""
    start_time = time.time()
    
    try:
        async with AsyncYandexGPTMonitor() as monitor:
            async with aiohttp.ClientSession() as telegram_session:
                news_content = await monitor.search_ai_news(hour)
                
                if news_content:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–æ–±–µ–ª–æ–≤
                    lines = news_content.split('\n')
                    cleaned_content = []
                    
                    for i, line in enumerate(lines):
                        line = line.strip()
                        if not line:
                            continue
                            
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
                        cleaned_content.append(line)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –±–ª–æ–∫–æ–≤ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                        if (line.startswith('üöÄ') or line.startswith('üìù') or 
                            line.startswith('üí°') or line.startswith('üîó')) and i < len(lines) - 1:
                            next_line = lines[i + 1].strip() if i + 1 < len(lines) else ""
                            if next_line and not next_line.startswith('üîñ'):
                                cleaned_content.append('')
                    
                    telegram_message = '\n'.join(cleaned_content)
                    
                    if await send_to_telegram_async(telegram_message, telegram_session):
                        execution_time = time.time() - start_time
                        logger.info(f"‚úÖ {hour:02d}:00 - {execution_time:.1f}—Å–µ–∫, ~{monitor.token_usage}—Ç–∫–Ω")
                        return True
                    else:
                        logger.error(f"‚ùå {hour:02d}:00 - –û—à–∏–±–∫–∞ Telegram")
                        return False
                else:
                    logger.error(f"‚ùå {hour:02d}:00 - –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå {hour:02d}:00 - –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö
    msk_time = datetime.now(timezone(timedelta(hours=3)))
    current_hour = msk_time.hour
    
    logger.info("=" * 50)
    logger.info("üöÄ AI News Monitor - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–æ–±–µ–ª–∞–º–∏")
    logger.info(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {msk_time.strftime('%H:%M')} –ú–°–ö")
    logger.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Å
    if current_hour in PUBLICATION_HOURS:
        logger.info(f"üéØ –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è {current_hour:02d}:00")
        success = await publish_hourly_news(current_hour)
        
        if success:
            logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {current_hour:02d}:00")
        else:
            logger.warning(f"‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è {current_hour:02d}:00")
    else:
        logger.info(f"‚è∏Ô∏è {current_hour:02d}:00 - –Ω–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

if __name__ == "__main__":
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not all([YANDEX_API_KEY, YANDEX_FOLDER_ID, TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID]):
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())
