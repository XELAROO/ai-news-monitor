import os
import aiohttp
import asyncio
import json
import re
from datetime import datetime, timedelta, timezone
import logging
import time
from typing import List, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')

# –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
PUBLICATION_HOURS = list(range(24))  # 0-23 —á–∞—Å–∞

class CompanyRotationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—Ç–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    
    def __init__(self):
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ —É—Ä–æ–≤–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        self.companies_night = [  # 00-06 –ú–°–ö - –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–∞–∫—Ç–∏–≤–Ω—ã –≤ –°–®–ê)
            "OpenAI", "Anthropic", "Google", "Microsoft", "xAI", "Meta",
            "Apple", "Amazon", "NVIDIA", "Tesla"
        ]
        
        self.companies_morning = [  # 07-11 –ú–°–ö - –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
            "OpenAI", "Google", "Microsoft", "Meta", "xAI", "Anthropic",
            "Apple", "Amazon", "NVIDIA", "Tesla", "DeepSeek",
            "Yandex", "Midjourney", "Stability AI", "Hugging Face"
        ]
        
        self.companies_day = [  # 12-17 –ú–°–ö - –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
            "OpenAI", "Google", "Microsoft", "Meta", "xAI", "Anthropic", 
            "Apple", "Amazon", "NVIDIA", "Tesla", "DeepSeek",
            "Yandex", "Midjourney", "Stability AI", "Hugging Face"
        ]
        
        self.companies_evening = [  # 18-23 –ú–°–ö - –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ + —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ
            "OpenAI", "Google", "Microsoft", "Meta", "xAI", "Anthropic",
            "Apple", "Amazon", "NVIDIA", "Tesla", "DeepSeek", "Yandex"
        ]
        
        self.all_companies = list(set(
            self.companies_night + self.companies_morning + 
            self.companies_day + self.companies_evening
        ))
        
        self.current_index = 0
        self.last_rotation_date = None
        
    def get_company_for_hour(self, hour: int) -> str:
        """–í—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
        today = datetime.now().date()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è –¥–µ–Ω—å
        if self.last_rotation_date != today:
            self.current_index = 0
            self.last_rotation_date = today
        
        # –í—ã–±–æ—Ä –ø—É–ª–∞ –∫–æ–º–ø–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        if 0 <= hour <= 6:    # –ù–æ—á—å (00-06 –ú–°–ö)
            companies_pool = self.companies_night
            time_slot = "–Ω–æ—á—å"
        elif 7 <= hour <= 11: # –£—Ç—Ä–æ (07-11 –ú–°–ö)  
            companies_pool = self.companies_morning
            time_slot = "—É—Ç—Ä–æ"
        elif 12 <= hour <= 17: # –î–µ–Ω—å (12-17 –ú–°–ö)
            companies_pool = self.companies_day
            time_slot = "–¥–µ–Ω—å"
        else:                 # –í–µ—á–µ—Ä (18-23 –ú–°–ö)
            companies_pool = self.companies_evening
            time_slot = "–≤–µ—á–µ—Ä"
        
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞
        company = companies_pool[self.current_index % len(companies_pool)]
        self.current_index += 1
        
        logger.info(f"üè¢ –†–æ—Ç–∞—Ü–∏—è: {hour:02d}:00 –ú–°–ö ({time_slot}) -> {company}")
        return company
    
    def get_company_sources(self, company: str) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
        sources_map = {
            "OpenAI": {
                "x": "https://x.com/OpenAI",
                "blog": "openai.com/blog",
                "official": "OpenAI –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"
            },
            "Google": {
                "x": "https://x.com/Google", 
                "blog": "blog.google",
                "official": "Google AI –±–ª–æ–≥"
            },
            "Microsoft": {
                "x": "https://x.com/Microsoft",
                "blog": "blogs.microsoft.com/ai",
                "official": "Microsoft AI –±–ª–æ–≥"
            },
            "Meta": {
                "x": "https://x.com/Meta",
                "blog": "ai.meta.com",
                "official": "Meta AI –±–ª–æ–≥"
            },
            "xAI": {
                "x": "https://x.com/xAI",
                "blog": "x.ai/blog",
                "official": "xAI –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"
            },
            "Anthropic": {
                "x": "https://x.com/AnthropicAI", 
                "blog": "anthropic.com/news",
                "official": "Anthropic –±–ª–æ–≥"
            },
            "Apple": {
                "x": "https://x.com/Apple",
                "blog": "developer.apple.com/machine-learning",
                "official": "Apple Machine Learning"
            },
            "Amazon": {
                "x": "https://x.com/Amazon",
                "blog": "aws.amazon.com/blogs/machine-learning",
                "official": "AWS AI –±–ª–æ–≥"
            },
            "NVIDIA": {
                "x": "https://x.com/NVIDIA", 
                "blog": "blogs.nvidia.com",
                "official": "NVIDIA AI –±–ª–æ–≥"
            },
            "Tesla": {
                "x": "https://x.com/Tesla",
                "blog": "tesla.com/AI",
                "official": "Tesla AI"
            },
            "DeepSeek": {
                "x": "https://x.com/DeepSeekAI",
                "blog": "deepseek.com",
                "official": "DeepSeek –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π"
            },
            "Yandex": {
                "x": "https://x.com/Yandex",
                "blog": "yandex.ru/blog/company/ai",
                "official": "Yandex AI –±–ª–æ–≥"
            },
            "Midjourney": {
                "x": "https://x.com/Midjourney",
                "blog": "midjourney.com/news",
                "official": "Midjourney –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π"
            },
            "Stability AI": {
                "x": "https://x.com/StabilityAI", 
                "blog": "stability.ai/news",
                "official": "Stability AI –±–ª–æ–≥"
            },
            "Hugging Face": {
                "x": "https://x.com/HuggingFace",
                "blog": "huggingface.co/blog",
                "official": "Hugging Face –±–ª–æ–≥"
            }
        }
        
        return sources_map.get(company, {
            "x": f"https://x.com/search?q={company} AI",
            "blog": f"–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π {company}",
            "official": f"{company} –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        })

class AsyncYandexGPTMonitor:
    def __init__(self):
        self.api_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.headers = {
            "Authorization": f"Api-Key {YANDEX_API_KEY}",
            "Content-Type": "application/json"
        }
        self.session = None
        self.token_usage = 0
        self.company_manager = CompanyRotationManager()
        
        # –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
        self.trusted_domains = [
            'blog.google', 'blogs.microsoft.com', 'openai.com/blog', 
            'ai.meta.com', 'x.ai', 'anthropic.com', 'developer.apple.com',
            'aws.amazon.com', 'blogs.nvidia.com', 'tesla.com',
            'yandex.ru/blog', 'deepseek.com', 'midjourney.com',
            'stability.ai', 'huggingface.co',
            'techcrunch.com', 'theverge.com', 'wired.com', 'arstechnica.com',
            'reuters.com', 'bloomberg.com', 'cnbc.com', 'venturebeat.com',
            'arxiv.org', 'nature.com', 'science.org'
        ]

    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def yandex_gpt_call(self, prompt, max_tokens=2000):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ YandexGPT API"""
        try:
            data = {
                "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.7,
                    "maxTokens": max_tokens
                },
                "messages": [
                    {
                        "role": "system",
                        "text": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–± –ò–ò. 
                        –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏:
                        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –∏–∑–¥–∞–Ω–∏—è–º
                        - –ò–∑–±–µ–≥–∞–π —Å–ª—É—Ö–æ–≤, —É—Ç–µ—á–µ–∫ –∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                        - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –≤–∞–∂–Ω–µ–µ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
                        - –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π - –ª—É—á—à–µ —Å–æ–æ–±—â–∏ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏"""
                    },
                    {
                        "role": "user", 
                        "text": prompt
                    }
                ]
            }

            logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∫ YandexGPT ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            async with self.session.post(
                self.api_url, 
                headers=self.headers, 
                json=data, 
                timeout=aiohttp.ClientTimeout(total=90)
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    if 'result' in result and 'alternatives' in result['result']:
                        content = result['result']['alternatives'][0]['message']['text']
                        
                        estimated_tokens = len(content) // 4 + len(prompt) // 4
                        self.token_usage += estimated_tokens
                        
                        cost = (estimated_tokens / 1000) * 0.60
                        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤, ~{estimated_tokens} —Ç–∫–Ω, {cost:.2f} —Ä—É–±)")
                        
                        return content
                    else:
                        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                        return None
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                    return None
                    
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (90 —Å–µ–∫)")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    async def search_ai_news(self, hour: int):
        """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–æ–º–ø–∞–Ω–∏–π"""
        target_company = self.company_manager.get_company_for_hour(hour)
        company_sources = self.company_manager.get_company_sources(target_company)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        time_contexts = {
            **{h: "–Ω–æ—á–Ω—ã–µ" for h in range(0, 7)},
            **{h: "—É—Ç—Ä–µ–Ω–Ω–∏–µ" for h in range(7, 12)},
            **{h: "–¥–Ω–µ–≤–Ω—ã–µ" for h in range(12, 18)},
            **{h: "–≤–µ—á–µ—Ä–Ω–∏–µ" for h in range(18, 24)}
        }
        
        context = time_contexts.get(hour, "—Ç–µ–∫—É—â–∏–µ")
        
        prompt = f"""
        –ù–∞–π–¥–∏ –°–ê–ú–£–Æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏ –î–û–°–¢–û–í–ï–†–ù–£–Æ –Ω–æ–≤–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ {target_company}.
        –°–µ–π—á–∞—Å {hour:02d}:00 –ú–°–ö ({context} —á–∞—Å—ã).
        
        –ö–û–ù–ö–†–ï–¢–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò –î–õ–Ø {target_company.upper()}:
        - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π X (Twitter): {company_sources['x']}
        - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–ª–æ–≥: {company_sources['blog']}
        - –î—Ä—É–≥–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {company_sources['official']}
        
        –£–ß–¢–ò –í–†–ï–ú–Ø –°–£–¢–û–ö:
        - {hour:02d}:00 –ú–°–ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
        - –ù–æ–≤–æ—Å—Ç–∏ –º–æ–≥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∏–∑ –°–®–ê, –ï–≤—Ä–æ–ø—ã –∏–ª–∏ –ê–∑–∏–∏
        - –ü—Ä–æ–≤–µ—Ä—è–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
        
        –ö–†–ò–¢–ï–†–ò–ò –î–û–°–¢–û–í–ï–†–ù–û–°–¢–ò:
        ‚úÖ **–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢:** –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã, –±–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑—ã
        ‚úÖ **–î–û–ü–£–°–¢–ò–ú–û:** –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–∑–¥–∞–Ω–∏—è (–µ—Å–ª–∏ —Ü–∏—Ç–∏—Ä—É—é—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
        ‚ùå **–ò–ó–ë–ï–ì–ê–¢–¨:** –°–ª—É—Ö–∏, –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —É—Ç–µ—á–∫–∏, —Å–æ—Ü—Å–µ—Ç–∏ (–∫—Ä–æ–º–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö)
        
        –ï–°–õ–ò –ù–ï–¢ –ù–û–í–û–°–¢–ï–ô –û–¢ {target_company.upper()}:
        - –ú–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç—å –æ –∑–Ω–∞—á–∏–º–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–µ —Å —É—á–∞—Å—Ç–∏–µ–º {target_company}
        - –ò–ª–∏ –≤–∞–∂–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –æ—Ç –¥—Ä—É–≥–æ–π –∫—Ä—É–ø–Ω–æ–π –ò–ò-–∫–æ–º–ø–∞–Ω–∏–∏
        - –ù–æ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ –∏–º–µ–Ω–Ω–æ {target_company}
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å–æ–±–ª—é–¥–∞–π —Ç–æ—á–Ω–æ!):
        
        üöÄ {target_company}: [–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏]\n\n
        
        üìù [3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ö–û–ù–ö–†–ï–¢–ù–´–ú–ò —Ñ–∞–∫—Ç–∞–º–∏ –æ {target_company}]\n\n
        
        üí° [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]\n\n
        
        üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –ü–†–Ø–ú–û–ô –ò–°–¢–û–ß–ù–ò–ö –æ—Ç {target_company}]\n\n
        
        üîñ #{target_company.replace(' ', '')} #–ò–ò #–ù–æ–≤–æ—Å—Ç–∏–ò–ò [–µ—â–µ 1-2 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–∞]
        
        –í–ê–ñ–ù–û: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–∞–¥ —Å–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å—é!
        """
        
        news_content = await self.yandex_gpt_call(prompt)
        return news_content, target_company

async def send_to_telegram_async(message, session):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        async with session.post(url, json=payload, timeout=aiohttp.ClientTimeout(total=20)) as response:
            if response.status == 200:
                return True
            else:
                return False
    except Exception:
        return False

async def send_no_news_message(hour, session, company=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    if company:
        message = f"""
üöÄ AI News Monitor ‚Ä¢ {hour:02d}:00 –ú–°–ö

üìù –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç {company}.

üí° –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ {(hour + 1) % 24:02d}:00 –ú–°–ö –±—É–¥–µ—Ç –æ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.

üîñ #{company.replace(' ', '')} #–ò–ò #–ù–æ–≤–æ—Å—Ç–∏ #–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        """
    else:
        message = f"""
üöÄ AI News Monitor ‚Ä¢ {hour:02d}:00 –ú–°–ö

üìù –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.

üí° –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.

üîñ #–ò–ò #–ù–æ–≤–æ—Å—Ç–∏ #–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        """
    
    return await send_to_telegram_async(message, session)

async def publish_hourly_news(hour):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–æ–º–ø–∞–Ω–∏–π"""
    start_time = time.time()
    
    try:
        async with AsyncYandexGPTMonitor() as monitor:
            async with aiohttp.ClientSession() as telegram_session:
                news_content, target_company = await monitor.search_ai_news(hour)
                
                if news_content:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
                    no_news_phrases = [
                        "–Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", "–Ω–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö", "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π",
                        "–Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç", "–ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", "no news", "nothing found"
                    ]
                    
                    if any(phrase in news_content.lower() for phrase in no_news_phrases):
                        logger.info(f"‚ÑπÔ∏è {hour:02d}:00 - –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç {target_company}")
                        await send_no_news_message(hour, telegram_session, target_company)
                        return True
                    
                    # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    lines = news_content.split('\n')
                    cleaned_content = []
                    start_adding = False
                    
                    for line in lines:
                        line = line.strip()
                        if not line:
                            continue
                            
                        if line.startswith('üöÄ'):
                            start_adding = True
                        
                        if start_adding:
                            cleaned_content.append(line)
                            if line.startswith('üîñ'):
                                break
                    
                    telegram_message = '\n'.join(cleaned_content)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–º–ø–∞–Ω–∏–∏
                    time_note = f"\n\n<em>üïê {hour:02d}:00 –ú–°–ö ‚Ä¢ üè¢ {target_company}</em>"
                    telegram_message += time_note
                    
                    if await send_to_telegram_async(telegram_message, telegram_session):
                        execution_time = time.time() - start_time
                        logger.info(f"‚úÖ {hour:02d}:00 - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –æ {target_company} ({execution_time:.1f}—Å–µ–∫)")
                        return True
                    else:
                        logger.error(f"‚ùå {hour:02d}:00 - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
                        return False
                else:
                    logger.error(f"‚ùå {hour:02d}:00 - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –æ {target_company}")
                    await send_no_news_message(hour, telegram_session, target_company)
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå {hour:02d}:00 - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö
    msk_time = datetime.now(timezone(timedelta(hours=3)))
    current_hour = msk_time.hour
    
    logger.info("=" * 60)
    logger.info("üöÄ AI News Monitor - –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º 24/7")
    logger.info(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {msk_time.strftime('%H:%M')} –ú–°–ö")
    logger.info(f"üìÖ –†–µ–∂–∏–º: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å")
    logger.info("=" * 60)
    
    # –í—Å–µ–≥–¥–∞ –ø—É–±–ª–∏–∫—É–µ–º (–∫–∞–∂–¥—ã–π —á–∞—Å)
    logger.info(f"üéØ –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è {current_hour:02d}:00")
    success = await publish_hourly_news(current_hour)
    
    if success:
        logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {current_hour:02d}:00")
    else:
        logger.warning(f"‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è {current_hour:02d}:00")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not all([YANDEX_API_KEY, YANDEX_FOLDER_ID, TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID]):
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())
