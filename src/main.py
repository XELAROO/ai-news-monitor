import os
import requests
import json
import time
from datetime import datetime, timedelta
import schedule
import threading

print("=" * 60)
print("üöÄ AI News Monitor —Å YandexGPT 5.1 Pro")
print("=" * 60)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
print(f"YANDEX_API_KEY: {'***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω***' if YANDEX_API_KEY else '‚ùå –ù–ï–¢'}")
print(f"YANDEX_FOLDER_ID: {'***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω***' if YANDEX_FOLDER_ID else '‚ùå –ù–ï–¢'}")
print(f"TELEGRAM_BOT_TOKEN: {'***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω***' if TELEGRAM_BOT_TOKEN else '‚ùå –ù–ï–¢'}")
print(f"TELEGRAM_CHANNEL_ID: {'***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω***' if TELEGRAM_CHANNEL_ID else '‚ùå –ù–ï–¢'}")
print("-" * 60)

class YandexGPTMonitor:
    def __init__(self):
        self.api_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.headers = {
            "Authorization": f"Api-Key {YANDEX_API_KEY}",
            "Content-Type": "application/json"
        }
        
    def yandex_gpt_call(self, prompt, max_tokens=2000):
        """–í—ã–∑–æ–≤ YandexGPT API"""
        try:
            data = {
                "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.7,
                    "maxTokens": max_tokens
                },
                "messages": [
                    {
                        "role": "system",
                        "text": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ. –°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ engaging –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                    },
                    {
                        "role": "user",
                        "text": prompt
                    }
                ]
            }
            
            print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ YandexGPT ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)...")
            response = requests.post(self.api_url, headers=self.headers, json=data, timeout=60)
            
            if response.status_code == 200:
                result = response.json()
                if 'result' in result and 'alternatives' in result['result']:
                    content = result['result']['alternatives'][0]['message']['text']
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return content
                else:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {result}")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ YandexGPT: {e}")
            return None

    def search_ai_news(self):
        """–ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –æ–± –ò–ò"""
        prompt = """
        –ù–∞–π–¥–∏ –°–ê–ú–£–Æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏ –≤–∞–∂–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 —á–∞—Å–∞ –≤ —Å—Ñ–µ—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞:
        - –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç –≤–µ–¥—É—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π: Google, Microsoft, OpenAI, Meta, Yandex, Apple, Amazon
        - –ü—Ä–æ—Ä—ã–≤–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∫—Ä—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram:
        
        üöÄ [–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å —ç–º–æ–¥–∑–∏]
        
        üìù [–°—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º - —É–ø–æ–º–∏–Ω–∞–π —Ü–∏—Ñ—Ä—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è]
        
        üí° [–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –∑–Ω–∞—á–µ–Ω–∏–∏ –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏]
        
        üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ]
        
        üîñ [3-5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º]
        
        –ü—Ä–∏–º–µ—Ä:
        üöÄ Google –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ Gemini Ultra 2.0!
        
        üìù –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç 95% —Ç–æ—á–Ω–æ—Å—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö, –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è GPT-4. 
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 50 —è–∑—ã–∫–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏.
        –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.
        
        üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ª–∞–Ω–¥—à–∞—Ñ—Ç AI-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∏ —É—Å–∫–æ—Ä–∏—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –ò–ò –≤ –±–∏–∑–Ω–µ—Å–µ.
        
        üîó https://blog.google/technology/ai/gemini-ultra-2
        
        üîñ #Google #Gemini #–ò–ò #AI #–ü—Ä–æ—Ä—ã–≤
        """
        
        return self.yandex_gpt_call(prompt)

def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHANNEL_ID,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": False
        }
        
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def publish_daily_news():
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    print(f"\nüìÖ –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {datetime.now().strftime('%H:%M')}...")
    
    monitor = YandexGPTMonitor()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –æ—Ç YandexGPT
    news_content = monitor.search_ai_news()
    
    if news_content:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
        telegram_message = f"""
ü§ñ <b>–°–í–ï–ñ–ê–Ø –ù–û–í–û–°–¢–¨ –ò–ò</b> ‚Ä¢ {datetime.now().strftime('%H:%M')}

{news_content}

<em>üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: YandexGPT 5.1 Pro</em>
        """
        
        if send_to_telegram(telegram_message):
            print("üéâ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
            log_entry = f"{datetime.now()}: –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n"
            with open("news_log.txt", "a", encoding="utf-8") as f:
                f.write(log_entry)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –æ—Ç YandexGPT")
        
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        backup_message = """
ü§ñ <b>AI NEWS MONITOR</b> ‚Ä¢ {datetime.now().strftime('%H:%M')}

‚ö†Ô∏è <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏</b>

üì° –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. 
–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —á–∞—Å!

üí° <i>–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç YandexGPT 5.1 Pro –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</i>

üîñ #–ò–ò #–ù–æ–≤–æ—Å—Ç–∏ #–¢–µ—Ö—Ä–∞–±–æ—Ç—ã
        """
        send_to_telegram(backup_message)

def schedule_news():
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–∫–∞–∂–¥—ã–π —á–∞—Å —Å 09:00 –¥–æ 21:00 –ø–æ –ú–°–ö)"""
    publication_times = [
        "09:00", "10:00", "11:00", "12:00", "13:00", "14:00",
        "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00"
    ]
    
    for time_str in publication_times:
        schedule.every().day.at(time_str).do(publish_daily_news)
        print(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ {time_str}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = {
        'YANDEX_API_KEY': YANDEX_API_KEY,
        'YANDEX_FOLDER_ID': YANDEX_FOLDER_ID, 
        'TELEGRAM_BOT_TOKEN': TELEGRAM_BOT_TOKEN,
        'TELEGRAM_CHANNEL_ID': TELEGRAM_CHANNEL_ID
    }
    
    missing_vars = [name for name, value in required_vars.items() if not value]
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        exit(1)
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_news()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("\nüß™ –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è...")
    publish_daily_news()
    
    print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
    print("‚Ä¢ 09:00 - 21:00: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å")
    print("‚Ä¢ –í—Å–µ–≥–æ 13 –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –¥–µ–Ω—å")
    print("‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ YandexGPT 5.1 Pro")
    print("\nüîÑ –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    try:
        while True:
            time.sleep(3600)  # –°–ø–∏–º 1 —á–∞—Å
    except KeyboardInterrupt:
        print("\nüõë –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
